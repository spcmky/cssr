{% extends '::base.html.twig' %}

{% block page_header %}
    <h1>Update Scores</h1>
{% endblock %}

{% block breadcrumb %}
    <ol class="breadcrumb">
        <li><a href="{{ path('cssr_main_default_index') }}"><span class="glyphicon glyphicon-home"></span></a></li>
        {% if user_is_granted(user,'score admin') %}
        <li><a href="{{ path('score') }}">Scores</a></li>
        <li><a href="{{ path('score_student') }}">Students</a></li>
        {% endif %}
        <li class="active">{{ student.firstname|capitalize }} {{ student.lastname|capitalize }}</li>
    </ol>
{% endblock %}

{% block body %}

    <p>Scores for the week of {{period_start.format('m/d/Y')}} - {{period_end.format('m/d/Y')}}</p>

    {% if periods|length %}
    <select name="periodSelector" id="periodSelector">
        {% for date in periods %}
            <option value="{{ date.format('Y-m-d') }}" {% if date.format('Y-m-d') == period.format('Y-m-d') %}selected="selected"{%endif%}>{{ date.format('m/d/Y') }}</option>
        {% endfor %}
    </select>
    {%  endif %}

    <h3><a href="{{ path('student_show', { 'id': student.id }) }}">{{ student.firstname|capitalize }} {{ student.lastname|capitalize }}</a></h3>

    <p>If the area you wish to score is not in this list, use the <a href="#quick-enroll">Quick Enroll</a> below to add the student to a course..</p>

    <form id="student-scores" name="student-scores">

    <div style="display: none;" class="alert alert-success"></div>
    <div style="display: none;" class="alert alert-danger"></div>

    <table class="table table-hover table-bordered">
        <thead>
        <tr>
            <th style="text-align: center;">Area</th>
            <th style="text-align: center;">Score</th>
            <th style="text-align: center;">Career Success Standards</th>
            <th style="width: 300px; text-align: center;">Comments</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        {% for score in scores %}

            {% set value = 'N/A' %}
            {% set score_id = '-1' %}
            {% if score.score.id %}
                {% set value = score.score.value %}
                {% set score_id = score.score.id %}
            {% endif %}

            <tr data-scoreId="{{ score_id }}" data-studentId="{{ student.id }}" data-courseId="{{ score.course.id }}">
                <td style="font-size: 14px; text-align: center; font-weight: bold;">{{ score.course.name }}</td>
                <td style="text-align: center;">
                    <select class="score-value">
                        <option>N/A</option>
                    {% for i in 1..5 %}
                        <option {% if value == i %}selected="selected"{% endif %}>{{ i }}</option>
                    {% endfor %}}
                    </select>
                </td>
                <td style="font-size: 10px;">
                    <div class="row">
                    {% for standard in standards %}
                        {% if loop.index0 % 4 == 0 %}
                        <div class="col-lg-6">
                        {% endif %}

                        {% set checked = '' %}
                        {% if score.comment is iterable and score.comment.standards is iterable %}
                            {% for standard_name in score.comment.standards %}
                                {% if standard_name == standard.name %}
                                    {% set checked = 'checked="checked"' %}
                                {% endif %}
                            {% endfor %}
                        {% endif %}

                        <label class="checkbox">
                            <input type="checkbox" name="score-standards[]" value="{{ standard.id }}" {{ checked }}> {{ standard.name }}
                        </label>

                        {% if loop.index0 % 4 == 3 %}
                        </div>
                        {% endif %}
                    {% endfor %}
                    </div>
                </td>
                <td>
                    <textarea class="form-control score-comment" rows="5" data-commentId="{% if score.comment is iterable %}{{ score.comment.id }}{% else %}-1{% endif %}">{% if score.comment is iterable %}{{ score.comment.body }}{% endif %}</textarea>
                    {% if score.comment is iterable %}
                        <small>Last updated by <a href="{{ path('staff_show', { 'id': score.comment.updater.id }) }}">{{ score.comment.updater.firstname|capitalize }} {{ score.comment.updater.lastname|capitalize }}</a> on {{ score.comment.updated|date('m/d/Y') }}</small>
                    {% endif %}
                </td>
                <td>
                    <input data-scoreId="{{ score_id }}" data-studentId="{{ student.id }}" data-courseId="{{ score.course.id }}" type="button" class="btn btn-primary score-action" value="{% if score_id < 1 %}Save{% else %}Update{% endif %}" />
                </td>
            </tr>

        {% endfor %}
        </tbody>
    </table>
    </form>

    <h3 id="quick-enroll" style="margin-top: 40px;">Quick Enroll</h3>
    <p>
        This provides the ability to enroll a student in a course without leaving the page. Once enrolled, the course will be made available to score above.
    </p>
    <table class="table table-hover">
    <thead>
        <tr>
            <th>Area</th>
            <th>Staff</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
    {% for area in availableCourses %}
        <tr>
            <td>{{ area.name }}</td>
            <td>
                <select class="course-id"  style="font-size: 16px; width: 220px;">
                    {% for course in area.courses %}
                    <option value="{{ course.id }}">{{ course.lastname|capitalize }}, {{ course.firstname|capitalize }}</option>
                    {% endfor %}}
                </select>
            </td>
            <td style="text-align: center;">
                <input data-studentId="{{ student.id }}" type="button" class="btn btn-primary enroll-action" value="Enroll" />
            </td>
        </tr>
    {% endfor %}
    </tbody>
    </table>


    <div id="scoreValidationModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header alert alert-danger">
                    <h4 class="modal-title">Score Validation Error</h4>
                </div>
                <div class="modal-body">
                    <p>You must select a score value.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->

    <div id="commentValidationModal" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header alert alert-danger">
                    <h4 class="modal-title">Score Validation Error</h4>
                </div>
                <div class="modal-body">
                    <p>For scores of 2 and lower and scores of 5, there must be a comment.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Ok</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->

    <script type="text/javascript">
        // Get the ul that holds the collection of tags
        (function() {

            var isValidScore = function (score,comment) {

                if ( score == 'N/A' ) {
                    $('#scoreValidationModal').modal();
                    return false;
                }

                if ( (score <= 2 || score == 5) && !comment ) {
                    $('#commentValidationModal').modal();
                    return false;
                }

                return true;
            };

            var sendScore = function ( button, container, scoreId, scoreValue ) {
                if ( scoreId < 0 ) {

                    var data = {
                        value: scoreValue,
                        student: container.data('studentid'),
                        course: container.data('courseid'),
                        period: $('#periodSelector').val()
                    };

                    $.ajax({
                        type: "POST",
                        url: '{{ path("score_create") }}',
                        data: data,
                        success: function(data,textStatus){
                            if ( textStatus == 'success' && data.status == 'success' ) {
                                //console.log('success');
                                container.data('scoreid',data.scoreId);

                                sendComment(container,data.scoreId);

                                button.val('Update');

                                $('#student-scores').find('.alert-success').html('Score created successfully!').show();
                                setTimeout(function(){
                                    $('#student-scores').find('.alert-success').hide();
                                },3000);

                            } else {
                                $('#student-scores').find('.alert-danger').html('Score creation failed!').show();
                                setTimeout(function(){
                                    $('#student-scores').find('.alert-danger').hide();
                                },3000);
                                //console.log('failed');
                            }
                        },
                        dataType: 'json'
                    });

                } else {

                    var data = {
                        value: scoreValue,
                        _method: 'PUT'
                    };

                    var url = '{{ path("score_update", {'id': 'score_id'}) }}';
                    url = url.replace("score_id", scoreId);

                    $.ajax({
                        type: "PUT",
                        url: url,
                        data: data,
                        success: function(data,textStatus){
                            if ( textStatus == 'success' && data.status == 'success' ) {
                                //console.log('success');
                                sendComment(container,scoreId);

                                $('#student-scores').find('.alert-success').html('Score updated successfully!').show();
                                setTimeout(function(){
                                    $('#student-scores').find('.alert-success').hide();
                                },3000);

                            } else {
                                $('#student-scores').find('.alert-danger').html('Score update failed!').show();
                                setTimeout(function(){
                                    $('#student-scores').find('.alert-danger').hide();
                                },3000);
                                //console.log('failed');
                            }
                        },
                        dataType: 'json'
                    });
                }
            };

            var sendComment = function ( container, scoreId ) {

                if ( scoreId > 0 ) {
                    // need a score id before we can submit

                    var commentContainer = container.find('td textarea');
                    var commentId = commentContainer.data('commentid');
                    var commentValue = commentContainer.val();

                    if ( !commentValue ) {
                        return;
                    }

                    if ( commentId < 0 ) {
                        var data = {
                            comment: commentValue,
                            score: scoreId,
                            standards: []
                        };

                        var checked_standards = container.find('input:checked');
                        $.each(checked_standards,function(){
                            data.standards.push($(this).val());
                        });

                        $.ajax({
                            type: "POST",
                            url: '{{ path("comment_create") }}',
                            data: data,
                            success: function(data,textStatus){
                                if ( textStatus == 'success' && data.status == 'success' ) {
                                    //console.log('success');
                                    commentContainer.data('commentid',data.commentId);
                                } else {
                                    //console.log('failed');
                                }
                            },
                            dataType: 'json'
                        });
                    } else {
                        var data = {
                            comment: commentValue,
                            standards: [],
                            _method: 'PUT'
                        };

                        var checked_standards = container.find('input:checked');
                        $.each(checked_standards,function(){
                            data.standards.push($(this).val());
                        });

                        var url = '{{ path("comment_update", {'id': 'comment_id'}) }}';
                        url = url.replace("comment_id", commentId);

                        $.ajax({
                            type: "PUT",
                            url: url,
                            data: data,
                            success: function(data,textStatus){
                                if ( textStatus == 'success' && data.status == 'success' ) {
                                    //console.log('success');
                                } else {
                                    //console.log('failed');
                                }
                            },
                            dataType: 'json'
                        });
                    }

                }
            };

            $(function() {

                $('input.score-action').on('click',function(){

                    var parent = $(this).parent().parent();
                    var scoreId = parent.data('scoreid');

                    var scoreValue = parent.find('td select').val();
                    var commentValue = parent.find('td textarea').val();

                    if ( !isValidScore(scoreValue,commentValue) ) {
                        return false;
                    }

                    // valid and continue

                    sendScore($(this),parent, scoreId, scoreValue );

                });

                $('input.enroll-action').on('click',function(){

                    $(this).prop('disabled', true);
                    $(this).val('Enrolling...');

                    var parent = $(this).parent().parent();

                    var student = $(this).data('studentid');
                    var course = parent.find('td select').val();

                    // enroll
                    var data = {
                        student: student
                    };

                    var url = '{{ path("course_enroll", {'id': 'course_id'}) }}';
                    url = url.replace("course_id", course);

                    $.ajax({
                        type: "POST",
                        url: url,
                        data: data,
                        success: function(data,textStatus){
                            if ( textStatus == 'success' && data.status == 'success' ) {
                                $(this).removeClass('btn-primary').addClass('btn-success').val('Enrollied');

                                // refresh page
                                location.reload(true);

                            } else {
                                $(this).removeClass('btn-primary').addClass('btn-danger').val('Failed');
                            }
                        },
                        dataType: 'json'
                    });

                });

            });

        })();
    </script>
{% endblock %}
